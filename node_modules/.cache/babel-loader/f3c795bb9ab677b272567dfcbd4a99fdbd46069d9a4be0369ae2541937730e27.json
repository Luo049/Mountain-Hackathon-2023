{"ast":null,"code":"module.export = {\n  responseGenerator\n};\nconst {\n  Configuration,\n  OpenAIApi\n} = require(\"openai\");\nrequire('dotenv').config();\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY\n});\nconst openai = new OpenAIApi(configuration);\nfunction inputPass(input, mood) {\n  responseGenerator(input, mood);\n}\nasync function responseGenerator(input, mood) {\n  mood = oppositeMood(mood);\n  let inputMessage = \"write a response message to\" + input + \"in a\" + mood + \"tone\";\n  const completion = await openai.createCompletion({\n    model: \"text-davinci-003\",\n    prompt: inputMessage,\n    max_tokens: 1000\n  });\n  // console.log(completion.data.choices[0].text);\n  // getReturnMessage(completion.data.choices[0].text)\n  return completion.data.choices[0].text;\n}\nasync function oppositeMood(moodInput) {\n  let opposite = \"what is the opposite of\" + moodInput;\n  const completion = await openai.createCompletion({\n    model: \"text-davinci-003\",\n    prompt: opposite,\n    max_tokens: 1000\n  });\n  // console.log(completion.data.choices[0].text);\n  // getReturnMessage(completion.data.choices[0].text)\n  return completion.data.choices[0].text;\n}\n\n// (async () => {\n//     input = \"i want food\"\n//     mood = \"angry\"\n//     response = (await responseGenerator(input, mood))\n//     console.log(response)\n// })()\n\nwhile (1) {\n  (async () => {\n    response = await responseGenerator(input, mood);\n    console.log(response);\n  })();\n}","map":{"version":3,"names":["module","export","responseGenerator","Configuration","OpenAIApi","require","config","configuration","apiKey","process","env","OPENAI_API_KEY","openai","inputPass","input","mood","oppositeMood","inputMessage","completion","createCompletion","model","prompt","max_tokens","data","choices","text","moodInput","opposite","response","console","log"],"sources":["/Users/Vito/Desktop/React/reactjs/Mountain-Hackathon-2023/src/chat.js"],"sourcesContent":["\nmodule.export = {responseGenerator}\n\nconst { Configuration, OpenAIApi } = require(\"openai\");\nrequire('dotenv').config()\n\nconst configuration = new Configuration({\n    apiKey: process.env.OPENAI_API_KEY,\n  });\n  const openai = new OpenAIApi(configuration);\n\n\nfunction inputPass(input, mood){\n    responseGenerator(input, mood)\n\n}\n\n\nasync function responseGenerator (input, mood) {\n    mood = oppositeMood(mood)\n    let inputMessage = \"write a response message to\" + input + \"in a\" + mood + \"tone\"\n    const completion = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: inputMessage,\n        max_tokens: 1000,\n    });\n    // console.log(completion.data.choices[0].text);\n    // getReturnMessage(completion.data.choices[0].text)\n    return completion.data.choices[0].text\n}\n\n\nasync function oppositeMood (moodInput) {\n    let opposite = (\"what is the opposite of\" + moodInput)\n    const completion = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: opposite,\n        max_tokens: 1000,\n    });\n    // console.log(completion.data.choices[0].text);\n    // getReturnMessage(completion.data.choices[0].text)\n    return completion.data.choices[0].text\n}\n\n\n// (async () => {\n//     input = \"i want food\"\n//     mood = \"angry\"\n//     response = (await responseGenerator(input, mood))\n//     console.log(response)\n// })()\n\nwhile(1){ \n\n    (async () => {\n        response = (await responseGenerator(input, mood))\n        console.log(response)\n    })()\n}\n"],"mappings":"AACAA,MAAM,CAACC,MAAM,GAAG;EAACC;AAAiB,CAAC;AAEnC,MAAM;EAAEC,aAAa;EAAEC;AAAU,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACtDA,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,EAAE;AAE1B,MAAMC,aAAa,GAAG,IAAIJ,aAAa,CAAC;EACpCK,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC;AACtB,CAAC,CAAC;AACF,MAAMC,MAAM,GAAG,IAAIR,SAAS,CAACG,aAAa,CAAC;AAG7C,SAASM,SAAS,CAACC,KAAK,EAAEC,IAAI,EAAC;EAC3Bb,iBAAiB,CAACY,KAAK,EAAEC,IAAI,CAAC;AAElC;AAGA,eAAeb,iBAAiB,CAAEY,KAAK,EAAEC,IAAI,EAAE;EAC3CA,IAAI,GAAGC,YAAY,CAACD,IAAI,CAAC;EACzB,IAAIE,YAAY,GAAG,6BAA6B,GAAGH,KAAK,GAAG,MAAM,GAAGC,IAAI,GAAG,MAAM;EACjF,MAAMG,UAAU,GAAG,MAAMN,MAAM,CAACO,gBAAgB,CAAC;IAC7CC,KAAK,EAAE,kBAAkB;IACzBC,MAAM,EAAEJ,YAAY;IACpBK,UAAU,EAAE;EAChB,CAAC,CAAC;EACF;EACA;EACA,OAAOJ,UAAU,CAACK,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;AAC1C;AAGA,eAAeT,YAAY,CAAEU,SAAS,EAAE;EACpC,IAAIC,QAAQ,GAAI,yBAAyB,GAAGD,SAAU;EACtD,MAAMR,UAAU,GAAG,MAAMN,MAAM,CAACO,gBAAgB,CAAC;IAC7CC,KAAK,EAAE,kBAAkB;IACzBC,MAAM,EAAEM,QAAQ;IAChBL,UAAU,EAAE;EAChB,CAAC,CAAC;EACF;EACA;EACA,OAAOJ,UAAU,CAACK,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;AAC1C;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAM,CAAC,EAAC;EAEJ,CAAC,YAAY;IACTG,QAAQ,GAAI,MAAM1B,iBAAiB,CAACY,KAAK,EAAEC,IAAI,CAAE;IACjDc,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;EACzB,CAAC,GAAG;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}