{"ast":null,"code":"const http = require('http');\nvar express = require('express');\nvar bodyParser = require('body-parser');\nconst cors = require(\"cors\"); //cross-origin resource sharing\nconst axios = require('axios');\nconst url = require('url');\nvar app = express();\nvar resdata = [];\nconst path = require('path');\nconst PORT = process.env.PORT || 5010;\napp.use(express.static(path.join(__dirname, 'public')));\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\n//app.use(express.json()); \napp.use(express.urlencoded({\n  extended: false\n}));\napp.use(express.json());\nconst {\n  Configuration,\n  OpenAIApi\n} = require(\"openai\");\nrequire('dotenv').config();\nconst configuration = new Configuration({\n  apiKey: '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'\n});\nconst openai = new OpenAIApi(configuration);\nfunction inputPass(input, mood) {\n  responseGenerator(input, mood);\n}\nasync function responseGenerator(input, mood) {\n  mood = oppositeMood(mood);\n  let inputMessage = \"write a response message to\" + input + \"in a\" + mood + \"tone\";\n  const completion = await openai.createCompletion({\n    model: \"text-davinci-003\",\n    prompt: inputMessage,\n    max_tokens: 1000\n  });\n  // console.log(completion.data.choices[0].text);\n  // getReturnMessage(completion.data.choices[0].text)\n  return completion.data.choices[0].text;\n}\nasync function oppositeMood(moodInput) {\n  let opposite = \"what is the opposite of\" + moodInput;\n  const completion = await openai.createCompletion({\n    model: \"text-davinci-003\",\n    prompt: opposite,\n    max_tokens: 1000\n  });\n  // console.log(completion.data.choices[0].text);\n  // getReturnMessage(completion.data.choices[0].text)\n  return completion.data.choices[0].text;\n}\n\n// export default Chat\n\napp.post('/chatrecvm', async (req, res) => {\n  let emotion = req.body.emotion;\n  let txt = req.body.textString;\n  console.log(\"Passthru: \", emotion, txt);\n  response = await responseGenerator(txt, emotion);\n  console.log(response);\n});\napp.get('/chatrecvm', (req, res) => {\n  res.json(\"NULL\");\n});\napp.listen(PORT, () => {\n  console.log(`Example app listening at http://localhost:${PORT}`);\n});\napp.use((req, res) => {\n  res.status(404);\n});\n\n// while(1){ \n\n//     (async () => {\n//         response = (await responseGenerator(input, mood))\n//         console.log(response)\n//     })()\n// }","map":{"version":3,"names":["http","require","express","bodyParser","cors","axios","url","app","resdata","path","PORT","process","env","use","static","join","__dirname","set","urlencoded","extended","json","Configuration","OpenAIApi","config","configuration","apiKey","openai","inputPass","input","mood","responseGenerator","oppositeMood","inputMessage","completion","createCompletion","model","prompt","max_tokens","data","choices","text","moodInput","opposite","post","req","res","emotion","body","txt","textString","console","log","response","get","listen","status"],"sources":["C:/Users/parmi/Downloads/mountainMadness2023/Mountain-Hackathon-2023/src/chatgpt-nodejs/chat.js"],"sourcesContent":["const http = require('http');\nvar express = require('express');\nvar bodyParser = require('body-parser');\nconst cors = require(\"cors\") //cross-origin resource sharing\nconst axios = require('axios')\nconst url = require('url')\nvar app = express();\nvar resdata = []\n\nconst path = require('path')\nconst PORT = process.env.PORT || 5010;\napp.use(express.static(path.join(__dirname, 'public')));\napp.set('views', path.join(__dirname, 'views'));\n\napp.set('view engine', 'ejs');\n//app.use(express.json()); \napp.use(express.urlencoded({ extended: false }));\napp.use(express.json());\n\n\nconst { Configuration, OpenAIApi } = require(\"openai\");\nrequire('dotenv').config()\n\nconst configuration = new Configuration({\n    apiKey: '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',\n});\nconst openai = new OpenAIApi(configuration);\n\n\nfunction inputPass(input, mood){\n    responseGenerator(input, mood)\n\n}\n\n\nasync function responseGenerator (input, mood) {\n    mood = oppositeMood(mood)\n    let inputMessage = \"write a response message to\" + input + \"in a\" + mood + \"tone\"\n    const completion = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: inputMessage,\n        max_tokens: 1000,\n    });\n    // console.log(completion.data.choices[0].text);\n    // getReturnMessage(completion.data.choices[0].text)\n    return completion.data.choices[0].text\n}\n\n\nasync function oppositeMood (moodInput) {\n    let opposite = (\"what is the opposite of\" + moodInput)\n    const completion = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: opposite,\n        max_tokens: 1000,\n    });\n    // console.log(completion.data.choices[0].text);\n    // getReturnMessage(completion.data.choices[0].text)\n    return completion.data.choices[0].text\n}\n\n// export default Chat\n\napp.post('/chatrecvm', async (req, res) => {\n\tlet emotion = req.body.emotion\n\tlet txt = req.body.textString\n\t\n\tconsole.log(\"Passthru: \", emotion, txt)\n    response = (await responseGenerator(txt, emotion))\n    console.log(response)\n\t\n});\n\napp.get('/chatrecvm', (req,res) => {\n\tres.json(\"NULL\");\n})\napp.listen(PORT, () => {\n    console.log(`Example app listening at http://localhost:${PORT}`)\n});\n\napp.use((req, res) => {\n    res.status(404);\n});\n\n// while(1){ \n\n//     (async () => {\n//         response = (await responseGenerator(input, mood))\n//         console.log(response)\n//     })()\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}