{"ast":null,"code":"function Chat() {\n  const {\n    Configuration,\n    OpenAIApi\n  } = require(\"openai\");\n  require('dotenv').config();\n  const configuration = new Configuration({\n    apiKey: process.env.OPENAI_API_KEY\n  });\n  const openai = new OpenAIApi(configuration);\n  function inputPass(input, mood) {\n    responseGenerator(input, mood);\n  }\n  async function responseGenerator(input, mood) {\n    mood = oppositeMood(mood);\n    let inputMessage = \"write a response message to\" + input + \"in a\" + mood + \"tone\";\n    const completion = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: inputMessage,\n      max_tokens: 1000\n    });\n    // console.log(completion.data.choices[0].text);\n    // getReturnMessage(completion.data.choices[0].text)\n    return completion.data.choices[0].text;\n  }\n  async function oppositeMood(moodInput) {\n    let opposite = \"what is the opposite of\" + moodInput;\n    const completion = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: opposite,\n      max_tokens: 1000\n    });\n    // console.log(completion.data.choices[0].text);\n    // getReturnMessage(completion.data.choices[0].text)\n    return completion.data.choices[0].text;\n  }\n}\n_c = Chat;\nexport default Chat;\n\n// (async () => {\n//     input = \"i want food\"\n//     mood = \"angry\"\n//     response = (await responseGenerator(input, mood))\n//     console.log(response)\n// })()\n\n// while(1){ \n\n//     (async () => {\n//         response = (await responseGenerator(input, mood))\n//         console.log(response)\n//     })()\n// }\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["Chat","Configuration","OpenAIApi","require","config","configuration","apiKey","process","env","OPENAI_API_KEY","openai","inputPass","input","mood","responseGenerator","oppositeMood","inputMessage","completion","createCompletion","model","prompt","max_tokens","data","choices","text","moodInput","opposite"],"sources":["/Users/Vito/Desktop/React/reactjs/Mountain-Hackathon-2023/src/chatgpt-nodejs/chat.js"],"sourcesContent":["\nfunction Chat() {\n\n    const { Configuration, OpenAIApi } = require(\"openai\");\n    require('dotenv').config()\n\n    const configuration = new Configuration({\n        apiKey: process.env.OPENAI_API_KEY,\n    });\n    const openai = new OpenAIApi(configuration);\n\n\n    function inputPass(input, mood){\n        responseGenerator(input, mood)\n\n    }\n\n\n    async function responseGenerator (input, mood) {\n        mood = oppositeMood(mood)\n        let inputMessage = \"write a response message to\" + input + \"in a\" + mood + \"tone\"\n        const completion = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: inputMessage,\n            max_tokens: 1000,\n        });\n        // console.log(completion.data.choices[0].text);\n        // getReturnMessage(completion.data.choices[0].text)\n        return completion.data.choices[0].text\n    }\n\n\n    async function oppositeMood (moodInput) {\n        let opposite = (\"what is the opposite of\" + moodInput)\n        const completion = await openai.createCompletion({\n            model: \"text-davinci-003\",\n            prompt: opposite,\n            max_tokens: 1000,\n        });\n        // console.log(completion.data.choices[0].text);\n        // getReturnMessage(completion.data.choices[0].text)\n        return completion.data.choices[0].text\n    }\n}\nexport default Chat\n\n// (async () => {\n//     input = \"i want food\"\n//     mood = \"angry\"\n//     response = (await responseGenerator(input, mood))\n//     console.log(response)\n// })()\n\n// while(1){ \n\n//     (async () => {\n//         response = (await responseGenerator(input, mood))\n//         console.log(response)\n//     })()\n// }\n"],"mappings":"AACA,SAASA,IAAI,GAAG;EAEZ,MAAM;IAAEC,aAAa;IAAEC;EAAU,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;EACtDA,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,EAAE;EAE1B,MAAMC,aAAa,GAAG,IAAIJ,aAAa,CAAC;IACpCK,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC;EACxB,CAAC,CAAC;EACF,MAAMC,MAAM,GAAG,IAAIR,SAAS,CAACG,aAAa,CAAC;EAG3C,SAASM,SAAS,CAACC,KAAK,EAAEC,IAAI,EAAC;IAC3BC,iBAAiB,CAACF,KAAK,EAAEC,IAAI,CAAC;EAElC;EAGA,eAAeC,iBAAiB,CAAEF,KAAK,EAAEC,IAAI,EAAE;IAC3CA,IAAI,GAAGE,YAAY,CAACF,IAAI,CAAC;IACzB,IAAIG,YAAY,GAAG,6BAA6B,GAAGJ,KAAK,GAAG,MAAM,GAAGC,IAAI,GAAG,MAAM;IACjF,MAAMI,UAAU,GAAG,MAAMP,MAAM,CAACQ,gBAAgB,CAAC;MAC7CC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAEJ,YAAY;MACpBK,UAAU,EAAE;IAChB,CAAC,CAAC;IACF;IACA;IACA,OAAOJ,UAAU,CAACK,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;EAC1C;EAGA,eAAeT,YAAY,CAAEU,SAAS,EAAE;IACpC,IAAIC,QAAQ,GAAI,yBAAyB,GAAGD,SAAU;IACtD,MAAMR,UAAU,GAAG,MAAMP,MAAM,CAACQ,gBAAgB,CAAC;MAC7CC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAEM,QAAQ;MAChBL,UAAU,EAAE;IAChB,CAAC,CAAC;IACF;IACA;IACA,OAAOJ,UAAU,CAACK,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;EAC1C;AACJ;AAAC,KA1CQxB,IAAI;AA2Cb,eAAeA,IAAI;;AAEnB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}